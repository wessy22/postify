"use strict";
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **
Object.defineProperty(exports, "__esModule", { value: true });
exports.InstancesClient = void 0;
const jsonProtos = require("../../protos/protos.json");
const google_gax_1 = require("google-gax");
/**
 * Client JSON configuration object, loaded from
 * `src/v1/instances_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
const gapicConfig = require("./instances_client_config.json");
const version = require('../../../package.json').version;
/**
 *  The Instances API.
 * @class
 * @memberof v1
 */
class InstancesClient {
    _terminated = false;
    _opts;
    _providedCustomServicePath;
    _gaxModule;
    _gaxGrpc;
    _protos;
    _defaults;
    _universeDomain;
    _servicePath;
    _log = google_gax_1.loggingUtils.log('compute');
    auth;
    descriptors = {
        page: {},
        stream: {},
        longrunning: {},
        batching: {},
    };
    warn;
    innerApiCalls;
    instancesStub;
    /**
     * Construct an instance of InstancesClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://cloud.google.com/docs/authentication/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new InstancesClient({fallback: true}, gax);
     *     ```
     */
    constructor(opts, gaxInstance) {
        // Ensure that options include all the required fields.
        const staticMembers = this.constructor;
        if (opts?.universe_domain &&
            opts?.universeDomain &&
            opts?.universe_domain !== opts?.universeDomain) {
            throw new Error('Please set either universe_domain or universeDomain, but not both.');
        }
        const universeDomainEnvVar = typeof process === 'object' && typeof process.env === 'object'
            ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN']
            : undefined;
        this._universeDomain =
            opts?.universeDomain ??
                opts?.universe_domain ??
                universeDomainEnvVar ??
                'googleapis.com';
        this._servicePath = 'compute.' + this._universeDomain;
        const servicePath = opts?.servicePath || opts?.apiEndpoint || this._servicePath;
        this._providedCustomServicePath = !!(opts?.servicePath || opts?.apiEndpoint);
        const port = opts?.port || staticMembers.port;
        const clientConfig = opts?.clientConfig ?? {};
        // Implicitly enable HTTP transport for the APIs that use REST as transport (e.g. Google Cloud Compute).
        if (!opts) {
            opts = { fallback: true };
        }
        else {
            opts.fallback = opts.fallback ?? true;
        }
        const fallback = opts?.fallback ??
            (typeof window !== 'undefined' && typeof window?.fetch === 'function');
        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);
        // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
        if (servicePath !== this._servicePath && !('scopes' in opts)) {
            opts['scopes'] = staticMembers.scopes;
        }
        // Load google-gax module synchronously if needed
        if (!gaxInstance) {
            gaxInstance = require('google-gax');
        }
        // Choose either gRPC or proto-over-HTTP implementation of google-gax.
        this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;
        // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);
        // Save options to use in initialize() method.
        this._opts = opts;
        // Save the auth object to the client, for use by other methods.
        this.auth = this._gaxGrpc.auth;
        // Set defaultServicePath on the auth object.
        this.auth.defaultServicePath = this._servicePath;
        // Set the default scopes in auth client if needed.
        if (servicePath === this._servicePath) {
            this.auth.defaultScopes = staticMembers.scopes;
        }
        // Determine the client header string.
        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
        if (typeof process === 'object' && 'versions' in process) {
            clientHeader.push(`gl-node/${process.versions.node}`);
        }
        else {
            clientHeader.push(`gl-web/${this._gaxModule.version}`);
        }
        if (!opts.fallback) {
            clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
        }
        else {
            clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
        }
        if (opts.libName && opts.libVersion) {
            clientHeader.push(`${opts.libName}/${opts.libVersion}`);
        }
        // Load the applicable protos.
        this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);
        // Some of the methods on this service return "paged" results,
        // (e.g. 50 results at a time, with tokens to get subsequent
        // pages). Denote the keys used for pagination and results.
        this.descriptors.page = {
            aggregatedList: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'items'),
            list: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'items'),
            listReferrers: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'items'),
        };
        // Put together the default options sent with requests.
        this._defaults = this._gaxGrpc.constructSettings('google.cloud.compute.v1.Instances', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });
        // Set up a dictionary of "inner API calls"; the core implementation
        // of calling the API is handled in `google-gax`, with this code
        // merely providing the destination and request information.
        this.innerApiCalls = {};
        // Add a warn function to the client constructor so it can be easily tested.
        this.warn = this._gaxModule.warn;
    }
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize() {
        // If the client stub promise is already initialized, return immediately.
        if (this.instancesStub) {
            return this.instancesStub;
        }
        // Put together the "service stub" for
        // google.cloud.compute.v1.Instances.
        this.instancesStub = this._gaxGrpc.createStub(this._opts.fallback
            ? this._protos.lookupService('google.cloud.compute.v1.Instances')
            : // eslint-disable-next-line @typescript-eslint/no-explicit-any
                this._protos.google.cloud.compute.v1.Instances, this._opts, this._providedCustomServicePath);
        // Iterate over each of the methods that the service provides
        // and create an API call method for each.
        const instancesStubMethods = [
            'addAccessConfig',
            'addResourcePolicies',
            'aggregatedList',
            'attachDisk',
            'bulkInsert',
            'delete',
            'deleteAccessConfig',
            'detachDisk',
            'get',
            'getEffectiveFirewalls',
            'getGuestAttributes',
            'getIamPolicy',
            'getScreenshot',
            'getSerialPortOutput',
            'getShieldedInstanceIdentity',
            'insert',
            'list',
            'listReferrers',
            'performMaintenance',
            'removeResourcePolicies',
            'reportHostAsFaulty',
            'reset',
            'resume',
            'sendDiagnosticInterrupt',
            'setDeletionProtection',
            'setDiskAutoDelete',
            'setIamPolicy',
            'setLabels',
            'setMachineResources',
            'setMachineType',
            'setMetadata',
            'setMinCpuPlatform',
            'setName',
            'setScheduling',
            'setSecurityPolicy',
            'setServiceAccount',
            'setShieldedInstanceIntegrityPolicy',
            'setTags',
            'simulateMaintenanceEvent',
            'start',
            'startWithEncryptionKey',
            'stop',
            'suspend',
            'testIamPermissions',
            'update',
            'updateAccessConfig',
            'updateDisplayDevice',
            'updateNetworkInterface',
            'updateShieldedInstanceConfig',
        ];
        for (const methodName of instancesStubMethods) {
            const callPromise = this.instancesStub.then(stub => (...args) => {
                if (this._terminated) {
                    return Promise.reject('The client has already been closed.');
                }
                const func = stub[methodName];
                return func.apply(stub, args);
            }, (err) => () => {
                throw err;
            });
            const descriptor = this.descriptors.page[methodName] || undefined;
            const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor, this._opts.fallback);
            this.innerApiCalls[methodName] = apiCall;
        }
        return this.instancesStub;
    }
    /**
     * The DNS address for this API service.
     * @deprecated Use the apiEndpoint method of the client instance.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath() {
        if (typeof process === 'object' &&
            typeof process.emitWarning === 'function') {
            process.emitWarning('Static servicePath is deprecated, please use the instance method instead.', 'DeprecationWarning');
        }
        return 'compute.googleapis.com';
    }
    /**
     * The DNS address for this API service - same as servicePath.
     * @deprecated Use the apiEndpoint method of the client instance.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint() {
        if (typeof process === 'object' &&
            typeof process.emitWarning === 'function') {
            process.emitWarning('Static apiEndpoint is deprecated, please use the instance method instead.', 'DeprecationWarning');
        }
        return 'compute.googleapis.com';
    }
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    get apiEndpoint() {
        return this._servicePath;
    }
    get universeDomain() {
        return this._universeDomain;
    }
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port() {
        return 443;
    }
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes() {
        return [
            'https://www.googleapis.com/auth/compute',
            'https://www.googleapis.com/auth/cloud-platform',
        ];
    }
    /**
     * Return the project ID used by this class.
     * @returns {Promise} A promise that resolves to string containing the project ID.
     */
    getProjectId(callback) {
        if (callback) {
            this.auth.getProjectId(callback);
            return;
        }
        return this.auth.getProjectId();
    }
    addAccessConfig(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                project: request.project ?? '',
                zone: request.zone ?? '',
                instance: request.instance ?? '',
            });
        this.initialize().catch(err => {
            throw err;
        });
        this._log.info('addAccessConfig request %j', request);
        const wrappedCallback = callback
            ? (error, response, nextRequest, rawResponse) => {
                this._log.info('addAccessConfig response %j', rawResponse);
                callback(error, response, nextRequest, rawResponse); // We verified `callback` above.
            }
            : undefined;
        return this.innerApiCalls
            .addAccessConfig(request, options, wrappedCallback)
            ?.then(([response, operation, rawResponse]) => {
            return [
                {
                    latestResponse: response,
                    done: false,
                    name: response.id,
                    metadata: null,
                    result: {},
                },
                operation,
                rawResponse,
            ];
        });
    }
    addResourcePolicies(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                project: request.project ?? '',
                zone: request.zone ?? '',
                instance: request.instance ?? '',
            });
        this.initialize().catch(err => {
            throw err;
        });
        this._log.info('addResourcePolicies request %j', request);
        const wrappedCallback = callback
            ? (error, response, nextRequest, rawResponse) => {
                this._log.info('addResourcePolicies response %j', rawResponse);
                callback(error, response, nextRequest, rawResponse); // We verified `callback` above.
            }
            : undefined;
        return this.innerApiCalls
            .addResourcePolicies(request, options, wrappedCallback)
            ?.then(([response, operation, rawResponse]) => {
            return [
                {
                    latestResponse: response,
                    done: false,
                    name: response.id,
                    metadata: null,
                    result: {},
                },
                operation,
                rawResponse,
            ];
        });
    }
    attachDisk(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                project: request.project ?? '',
                zone: request.zone ?? '',
                instance: request.instance ?? '',
            });
        this.initialize().catch(err => {
            throw err;
        });
        this._log.info('attachDisk request %j', request);
        const wrappedCallback = callback
            ? (error, response, nextRequest, rawResponse) => {
                this._log.info('attachDisk response %j', rawResponse);
                callback(error, response, nextRequest, rawResponse); // We verified `callback` above.
            }
            : undefined;
        return this.innerApiCalls
            .attachDisk(request, options, wrappedCallback)
            ?.then(([response, operation, rawResponse]) => {
            return [
                {
                    latestResponse: response,
                    done: false,
                    name: response.id,
                    metadata: null,
                    result: {},
                },
                operation,
                rawResponse,
            ];
        });
    }
    bulkInsert(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                project: request.project ?? '',
                zone: request.zone ?? '',
            });
        this.initialize().catch(err => {
            throw err;
        });
        this._log.info('bulkInsert request %j', request);
        const wrappedCallback = callback
            ? (error, response, nextRequest, rawResponse) => {
                this._log.info('bulkInsert response %j', rawResponse);
                callback(error, response, nextRequest, rawResponse); // We verified `callback` above.
            }
            : undefined;
        return this.innerApiCalls
            .bulkInsert(request, options, wrappedCallback)
            ?.then(([response, operation, rawResponse]) => {
            return [
                {
                    latestResponse: response,
                    done: false,
                    name: response.id,
                    metadata: null,
                    result: {},
                },
                operation,
                rawResponse,
            ];
        });
    }
    delete(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                project: request.project ?? '',
                zone: request.zone ?? '',
                instance: request.instance ?? '',
            });
        this.initialize().catch(err => {
            throw err;
        });
        this._log.info('delete request %j', request);
        const wrappedCallback = callback
            ? (error, response, nextRequest, rawResponse) => {
                this._log.info('delete response %j', rawResponse);
                callback(error, response, nextRequest, rawResponse); // We verified `callback` above.
            }
            : undefined;
        return this.innerApiCalls
            .delete(request, options, wrappedCallback)
            ?.then(([response, operation, rawResponse]) => {
            return [
                {
                    latestResponse: response,
                    done: false,
                    name: response.id,
                    metadata: null,
                    result: {},
                },
                operation,
                rawResponse,
            ];
        });
    }
    deleteAccessConfig(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                project: request.project ?? '',
                zone: request.zone ?? '',
                instance: request.instance ?? '',
            });
        this.initialize().catch(err => {
            throw err;
        });
        this._log.info('deleteAccessConfig request %j', request);
        const wrappedCallback = callback
            ? (error, response, nextRequest, rawResponse) => {
                this._log.info('deleteAccessConfig response %j', rawResponse);
                callback(error, response, nextRequest, rawResponse); // We verified `callback` above.
            }
            : undefined;
        return this.innerApiCalls
            .deleteAccessConfig(request, options, wrappedCallback)
            ?.then(([response, operation, rawResponse]) => {
            return [
                {
                    latestResponse: response,
                    done: false,
                    name: response.id,
                    metadata: null,
                    result: {},
                },
                operation,
                rawResponse,
            ];
        });
    }
    detachDisk(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                project: request.project ?? '',
                zone: request.zone ?? '',
                instance: request.instance ?? '',
            });
        this.initialize().catch(err => {
            throw err;
        });
        this._log.info('detachDisk request %j', request);
        const wrappedCallback = callback
            ? (error, response, nextRequest, rawResponse) => {
                this._log.info('detachDisk response %j', rawResponse);
                callback(error, response, nextRequest, rawResponse); // We verified `callback` above.
            }
            : undefined;
        return this.innerApiCalls
            .detachDisk(request, options, wrappedCallback)
            ?.then(([response, operation, rawResponse]) => {
            return [
                {
                    latestResponse: response,
                    done: false,
                    name: response.id,
                    metadata: null,
                    result: {},
                },
                operation,
                rawResponse,
            ];
        });
    }
    get(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                project: request.project ?? '',
                zone: request.zone ?? '',
                instance: request.instance ?? '',
            });
        this.initialize().catch(err => {
            throw err;
        });
        this._log.info('get request %j', request);
        const wrappedCallback = callback
            ? (error, response, options, rawResponse) => {
                this._log.info('get response %j', response);
                callback(error, response, options, rawResponse); // We verified callback above.
            }
            : undefined;
        return this.innerApiCalls
            .get(request, options, wrappedCallback)
            ?.then(([response, options, rawResponse]) => {
            this._log.info('get response %j', response);
            return [response, options, rawResponse];
        });
    }
    getEffectiveFirewalls(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                project: request.project ?? '',
                zone: request.zone ?? '',
                instance: request.instance ?? '',
            });
        this.initialize().catch(err => {
            throw err;
        });
        this._log.info('getEffectiveFirewalls request %j', request);
        const wrappedCallback = callback
            ? (error, response, options, rawResponse) => {
                this._log.info('getEffectiveFirewalls response %j', response);
                callback(error, response, options, rawResponse); // We verified callback above.
            }
            : undefined;
        return this.innerApiCalls
            .getEffectiveFirewalls(request, options, wrappedCallback)
            ?.then(([response, options, rawResponse]) => {
            this._log.info('getEffectiveFirewalls response %j', response);
            return [response, options, rawResponse];
        });
    }
    getGuestAttributes(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                project: request.project ?? '',
                zone: request.zone ?? '',
                instance: request.instance ?? '',
            });
        this.initialize().catch(err => {
            throw err;
        });
        this._log.info('getGuestAttributes request %j', request);
        const wrappedCallback = callback
            ? (error, response, options, rawResponse) => {
                this._log.info('getGuestAttributes response %j', response);
                callback(error, response, options, rawResponse); // We verified callback above.
            }
            : undefined;
        return this.innerApiCalls
            .getGuestAttributes(request, options, wrappedCallback)
            ?.then(([response, options, rawResponse]) => {
            this._log.info('getGuestAttributes response %j', response);
            return [response, options, rawResponse];
        });
    }
    getIamPolicy(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                project: request.project ?? '',
                zone: request.zone ?? '',
                resource: request.resource ?? '',
            });
        this.initialize().catch(err => {
            throw err;
        });
        this._log.info('getIamPolicy request %j', request);
        const wrappedCallback = callback
            ? (error, response, options, rawResponse) => {
                this._log.info('getIamPolicy response %j', response);
                callback(error, response, options, rawResponse); // We verified callback above.
            }
            : undefined;
        return this.innerApiCalls
            .getIamPolicy(request, options, wrappedCallback)
            ?.then(([response, options, rawResponse]) => {
            this._log.info('getIamPolicy response %j', response);
            return [response, options, rawResponse];
        });
    }
    getScreenshot(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                project: request.project ?? '',
                zone: request.zone ?? '',
                instance: request.instance ?? '',
            });
        this.initialize().catch(err => {
            throw err;
        });
        this._log.info('getScreenshot request %j', request);
        const wrappedCallback = callback
            ? (error, response, options, rawResponse) => {
                this._log.info('getScreenshot response %j', response);
                callback(error, response, options, rawResponse); // We verified callback above.
            }
            : undefined;
        return this.innerApiCalls
            .getScreenshot(request, options, wrappedCallback)
            ?.then(([response, options, rawResponse]) => {
            this._log.info('getScreenshot response %j', response);
            return [response, options, rawResponse];
        });
    }
    getSerialPortOutput(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                project: request.project ?? '',
                zone: request.zone ?? '',
                instance: request.instance ?? '',
            });
        this.initialize().catch(err => {
            throw err;
        });
        this._log.info('getSerialPortOutput request %j', request);
        const wrappedCallback = callback
            ? (error, response, options, rawResponse) => {
                this._log.info('getSerialPortOutput response %j', response);
                callback(error, response, options, rawResponse); // We verified callback above.
            }
            : undefined;
        return this.innerApiCalls
            .getSerialPortOutput(request, options, wrappedCallback)
            ?.then(([response, options, rawResponse]) => {
            this._log.info('getSerialPortOutput response %j', response);
            return [response, options, rawResponse];
        });
    }
    getShieldedInstanceIdentity(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                project: request.project ?? '',
                zone: request.zone ?? '',
                instance: request.instance ?? '',
            });
        this.initialize().catch(err => {
            throw err;
        });
        this._log.info('getShieldedInstanceIdentity request %j', request);
        const wrappedCallback = callback
            ? (error, response, options, rawResponse) => {
                this._log.info('getShieldedInstanceIdentity response %j', response);
                callback(error, response, options, rawResponse); // We verified callback above.
            }
            : undefined;
        return this.innerApiCalls
            .getShieldedInstanceIdentity(request, options, wrappedCallback)
            ?.then(([response, options, rawResponse]) => {
            this._log.info('getShieldedInstanceIdentity response %j', response);
            return [response, options, rawResponse];
        });
    }
    insert(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                project: request.project ?? '',
                zone: request.zone ?? '',
            });
        this.initialize().catch(err => {
            throw err;
        });
        this._log.info('insert request %j', request);
        const wrappedCallback = callback
            ? (error, response, nextRequest, rawResponse) => {
                this._log.info('insert response %j', rawResponse);
                callback(error, response, nextRequest, rawResponse); // We verified `callback` above.
            }
            : undefined;
        return this.innerApiCalls
            .insert(request, options, wrappedCallback)
            ?.then(([response, operation, rawResponse]) => {
            return [
                {
                    latestResponse: response,
                    done: false,
                    name: response.id,
                    metadata: null,
                    result: {},
                },
                operation,
                rawResponse,
            ];
        });
    }
    performMaintenance(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                project: request.project ?? '',
                zone: request.zone ?? '',
                instance: request.instance ?? '',
            });
        this.initialize().catch(err => {
            throw err;
        });
        this._log.info('performMaintenance request %j', request);
        const wrappedCallback = callback
            ? (error, response, nextRequest, rawResponse) => {
                this._log.info('performMaintenance response %j', rawResponse);
                callback(error, response, nextRequest, rawResponse); // We verified `callback` above.
            }
            : undefined;
        return this.innerApiCalls
            .performMaintenance(request, options, wrappedCallback)
            ?.then(([response, operation, rawResponse]) => {
            return [
                {
                    latestResponse: response,
                    done: false,
                    name: response.id,
                    metadata: null,
                    result: {},
                },
                operation,
                rawResponse,
            ];
        });
    }
    removeResourcePolicies(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                project: request.project ?? '',
                zone: request.zone ?? '',
                instance: request.instance ?? '',
            });
        this.initialize().catch(err => {
            throw err;
        });
        this._log.info('removeResourcePolicies request %j', request);
        const wrappedCallback = callback
            ? (error, response, nextRequest, rawResponse) => {
                this._log.info('removeResourcePolicies response %j', rawResponse);
                callback(error, response, nextRequest, rawResponse); // We verified `callback` above.
            }
            : undefined;
        return this.innerApiCalls
            .removeResourcePolicies(request, options, wrappedCallback)
            ?.then(([response, operation, rawResponse]) => {
            return [
                {
                    latestResponse: response,
                    done: false,
                    name: response.id,
                    metadata: null,
                    result: {},
                },
                operation,
                rawResponse,
            ];
        });
    }
    reportHostAsFaulty(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                project: request.project ?? '',
                zone: request.zone ?? '',
                instance: request.instance ?? '',
            });
        this.initialize().catch(err => {
            throw err;
        });
        this._log.info('reportHostAsFaulty request %j', request);
        const wrappedCallback = callback
            ? (error, response, nextRequest, rawResponse) => {
                this._log.info('reportHostAsFaulty response %j', rawResponse);
                callback(error, response, nextRequest, rawResponse); // We verified `callback` above.
            }
            : undefined;
        return this.innerApiCalls
            .reportHostAsFaulty(request, options, wrappedCallback)
            ?.then(([response, operation, rawResponse]) => {
            return [
                {
                    latestResponse: response,
                    done: false,
                    name: response.id,
                    metadata: null,
                    result: {},
                },
                operation,
                rawResponse,
            ];
        });
    }
    reset(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                project: request.project ?? '',
                zone: request.zone ?? '',
                instance: request.instance ?? '',
            });
        this.initialize().catch(err => {
            throw err;
        });
        this._log.info('reset request %j', request);
        const wrappedCallback = callback
            ? (error, response, nextRequest, rawResponse) => {
                this._log.info('reset response %j', rawResponse);
                callback(error, response, nextRequest, rawResponse); // We verified `callback` above.
            }
            : undefined;
        return this.innerApiCalls
            .reset(request, options, wrappedCallback)
            ?.then(([response, operation, rawResponse]) => {
            return [
                {
                    latestResponse: response,
                    done: false,
                    name: response.id,
                    metadata: null,
                    result: {},
                },
                operation,
                rawResponse,
            ];
        });
    }
    resume(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                project: request.project ?? '',
                zone: request.zone ?? '',
                instance: request.instance ?? '',
            });
        this.initialize().catch(err => {
            throw err;
        });
        this._log.info('resume request %j', request);
        const wrappedCallback = callback
            ? (error, response, nextRequest, rawResponse) => {
                this._log.info('resume response %j', rawResponse);
                callback(error, response, nextRequest, rawResponse); // We verified `callback` above.
            }
            : undefined;
        return this.innerApiCalls
            .resume(request, options, wrappedCallback)
            ?.then(([response, operation, rawResponse]) => {
            return [
                {
                    latestResponse: response,
                    done: false,
                    name: response.id,
                    metadata: null,
                    result: {},
                },
                operation,
                rawResponse,
            ];
        });
    }
    sendDiagnosticInterrupt(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                project: request.project ?? '',
                zone: request.zone ?? '',
                instance: request.instance ?? '',
            });
        this.initialize().catch(err => {
            throw err;
        });
        this._log.info('sendDiagnosticInterrupt request %j', request);
        const wrappedCallback = callback
            ? (error, response, options, rawResponse) => {
                this._log.info('sendDiagnosticInterrupt response %j', response);
                callback(error, response, options, rawResponse); // We verified callback above.
            }
            : undefined;
        return this.innerApiCalls
            .sendDiagnosticInterrupt(request, options, wrappedCallback)
            ?.then(([response, options, rawResponse]) => {
            this._log.info('sendDiagnosticInterrupt response %j', response);
            return [response, options, rawResponse];
        });
    }
    setDeletionProtection(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                project: request.project ?? '',
                zone: request.zone ?? '',
                resource: request.resource ?? '',
            });
        this.initialize().catch(err => {
            throw err;
        });
        this._log.info('setDeletionProtection request %j', request);
        const wrappedCallback = callback
            ? (error, response, nextRequest, rawResponse) => {
                this._log.info('setDeletionProtection response %j', rawResponse);
                callback(error, response, nextRequest, rawResponse); // We verified `callback` above.
            }
            : undefined;
        return this.innerApiCalls
            .setDeletionProtection(request, options, wrappedCallback)
            ?.then(([response, operation, rawResponse]) => {
            return [
                {
                    latestResponse: response,
                    done: false,
                    name: response.id,
                    metadata: null,
                    result: {},
                },
                operation,
                rawResponse,
            ];
        });
    }
    setDiskAutoDelete(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                project: request.project ?? '',
                zone: request.zone ?? '',
                instance: request.instance ?? '',
            });
        this.initialize().catch(err => {
            throw err;
        });
        this._log.info('setDiskAutoDelete request %j', request);
        const wrappedCallback = callback
            ? (error, response, nextRequest, rawResponse) => {
                this._log.info('setDiskAutoDelete response %j', rawResponse);
                callback(error, response, nextRequest, rawResponse); // We verified `callback` above.
            }
            : undefined;
        return this.innerApiCalls
            .setDiskAutoDelete(request, options, wrappedCallback)
            ?.then(([response, operation, rawResponse]) => {
            return [
                {
                    latestResponse: response,
                    done: false,
                    name: response.id,
                    metadata: null,
                    result: {},
                },
                operation,
                rawResponse,
            ];
        });
    }
    setIamPolicy(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                project: request.project ?? '',
                zone: request.zone ?? '',
                resource: request.resource ?? '',
            });
        this.initialize().catch(err => {
            throw err;
        });
        this._log.info('setIamPolicy request %j', request);
        const wrappedCallback = callback
            ? (error, response, options, rawResponse) => {
                this._log.info('setIamPolicy response %j', response);
                callback(error, response, options, rawResponse); // We verified callback above.
            }
            : undefined;
        return this.innerApiCalls
            .setIamPolicy(request, options, wrappedCallback)
            ?.then(([response, options, rawResponse]) => {
            this._log.info('setIamPolicy response %j', response);
            return [response, options, rawResponse];
        });
    }
    setLabels(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                project: request.project ?? '',
                zone: request.zone ?? '',
                instance: request.instance ?? '',
            });
        this.initialize().catch(err => {
            throw err;
        });
        this._log.info('setLabels request %j', request);
        const wrappedCallback = callback
            ? (error, response, nextRequest, rawResponse) => {
                this._log.info('setLabels response %j', rawResponse);
                callback(error, response, nextRequest, rawResponse); // We verified `callback` above.
            }
            : undefined;
        return this.innerApiCalls
            .setLabels(request, options, wrappedCallback)
            ?.then(([response, operation, rawResponse]) => {
            return [
                {
                    latestResponse: response,
                    done: false,
                    name: response.id,
                    metadata: null,
                    result: {},
                },
                operation,
                rawResponse,
            ];
        });
    }
    setMachineResources(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                project: request.project ?? '',
                zone: request.zone ?? '',
                instance: request.instance ?? '',
            });
        this.initialize().catch(err => {
            throw err;
        });
        this._log.info('setMachineResources request %j', request);
        const wrappedCallback = callback
            ? (error, response, nextRequest, rawResponse) => {
                this._log.info('setMachineResources response %j', rawResponse);
                callback(error, response, nextRequest, rawResponse); // We verified `callback` above.
            }
            : undefined;
        return this.innerApiCalls
            .setMachineResources(request, options, wrappedCallback)
            ?.then(([response, operation, rawResponse]) => {
            return [
                {
                    latestResponse: response,
                    done: false,
                    name: response.id,
                    metadata: null,
                    result: {},
                },
                operation,
                rawResponse,
            ];
        });
    }
    setMachineType(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                project: request.project ?? '',
                zone: request.zone ?? '',
                instance: request.instance ?? '',
            });
        this.initialize().catch(err => {
            throw err;
        });
        this._log.info('setMachineType request %j', request);
        const wrappedCallback = callback
            ? (error, response, nextRequest, rawResponse) => {
                this._log.info('setMachineType response %j', rawResponse);
                callback(error, response, nextRequest, rawResponse); // We verified `callback` above.
            }
            : undefined;
        return this.innerApiCalls
            .setMachineType(request, options, wrappedCallback)
            ?.then(([response, operation, rawResponse]) => {
            return [
                {
                    latestResponse: response,
                    done: false,
                    name: response.id,
                    metadata: null,
                    result: {},
                },
                operation,
                rawResponse,
            ];
        });
    }
    setMetadata(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                project: request.project ?? '',
                zone: request.zone ?? '',
                instance: request.instance ?? '',
            });
        this.initialize().catch(err => {
            throw err;
        });
        this._log.info('setMetadata request %j', request);
        const wrappedCallback = callback
            ? (error, response, nextRequest, rawResponse) => {
                this._log.info('setMetadata response %j', rawResponse);
                callback(error, response, nextRequest, rawResponse); // We verified `callback` above.
            }
            : undefined;
        return this.innerApiCalls
            .setMetadata(request, options, wrappedCallback)
            ?.then(([response, operation, rawResponse]) => {
            return [
                {
                    latestResponse: response,
                    done: false,
                    name: response.id,
                    metadata: null,
                    result: {},
                },
                operation,
                rawResponse,
            ];
        });
    }
    setMinCpuPlatform(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                project: request.project ?? '',
                zone: request.zone ?? '',
                instance: request.instance ?? '',
            });
        this.initialize().catch(err => {
            throw err;
        });
        this._log.info('setMinCpuPlatform request %j', request);
        const wrappedCallback = callback
            ? (error, response, nextRequest, rawResponse) => {
                this._log.info('setMinCpuPlatform response %j', rawResponse);
                callback(error, response, nextRequest, rawResponse); // We verified `callback` above.
            }
            : undefined;
        return this.innerApiCalls
            .setMinCpuPlatform(request, options, wrappedCallback)
            ?.then(([response, operation, rawResponse]) => {
            return [
                {
                    latestResponse: response,
                    done: false,
                    name: response.id,
                    metadata: null,
                    result: {},
                },
                operation,
                rawResponse,
            ];
        });
    }
    setName(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                project: request.project ?? '',
                zone: request.zone ?? '',
                instance: request.instance ?? '',
            });
        this.initialize().catch(err => {
            throw err;
        });
        this._log.info('setName request %j', request);
        const wrappedCallback = callback
            ? (error, response, nextRequest, rawResponse) => {
                this._log.info('setName response %j', rawResponse);
                callback(error, response, nextRequest, rawResponse); // We verified `callback` above.
            }
            : undefined;
        return this.innerApiCalls
            .setName(request, options, wrappedCallback)
            ?.then(([response, operation, rawResponse]) => {
            return [
                {
                    latestResponse: response,
                    done: false,
                    name: response.id,
                    metadata: null,
                    result: {},
                },
                operation,
                rawResponse,
            ];
        });
    }
    setScheduling(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                project: request.project ?? '',
                zone: request.zone ?? '',
                instance: request.instance ?? '',
            });
        this.initialize().catch(err => {
            throw err;
        });
        this._log.info('setScheduling request %j', request);
        const wrappedCallback = callback
            ? (error, response, nextRequest, rawResponse) => {
                this._log.info('setScheduling response %j', rawResponse);
                callback(error, response, nextRequest, rawResponse); // We verified `callback` above.
            }
            : undefined;
        return this.innerApiCalls
            .setScheduling(request, options, wrappedCallback)
            ?.then(([response, operation, rawResponse]) => {
            return [
                {
                    latestResponse: response,
                    done: false,
                    name: response.id,
                    metadata: null,
                    result: {},
                },
                operation,
                rawResponse,
            ];
        });
    }
    setSecurityPolicy(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                project: request.project ?? '',
                zone: request.zone ?? '',
                instance: request.instance ?? '',
            });
        this.initialize().catch(err => {
            throw err;
        });
        this._log.info('setSecurityPolicy request %j', request);
        const wrappedCallback = callback
            ? (error, response, nextRequest, rawResponse) => {
                this._log.info('setSecurityPolicy response %j', rawResponse);
                callback(error, response, nextRequest, rawResponse); // We verified `callback` above.
            }
            : undefined;
        return this.innerApiCalls
            .setSecurityPolicy(request, options, wrappedCallback)
            ?.then(([response, operation, rawResponse]) => {
            return [
                {
                    latestResponse: response,
                    done: false,
                    name: response.id,
                    metadata: null,
                    result: {},
                },
                operation,
                rawResponse,
            ];
        });
    }
    setServiceAccount(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                project: request.project ?? '',
                zone: request.zone ?? '',
                instance: request.instance ?? '',
            });
        this.initialize().catch(err => {
            throw err;
        });
        this._log.info('setServiceAccount request %j', request);
        const wrappedCallback = callback
            ? (error, response, nextRequest, rawResponse) => {
                this._log.info('setServiceAccount response %j', rawResponse);
                callback(error, response, nextRequest, rawResponse); // We verified `callback` above.
            }
            : undefined;
        return this.innerApiCalls
            .setServiceAccount(request, options, wrappedCallback)
            ?.then(([response, operation, rawResponse]) => {
            return [
                {
                    latestResponse: response,
                    done: false,
                    name: response.id,
                    metadata: null,
                    result: {},
                },
                operation,
                rawResponse,
            ];
        });
    }
    setShieldedInstanceIntegrityPolicy(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                project: request.project ?? '',
                zone: request.zone ?? '',
                instance: request.instance ?? '',
            });
        this.initialize().catch(err => {
            throw err;
        });
        this._log.info('setShieldedInstanceIntegrityPolicy request %j', request);
        const wrappedCallback = callback
            ? (error, response, nextRequest, rawResponse) => {
                this._log.info('setShieldedInstanceIntegrityPolicy response %j', rawResponse);
                callback(error, response, nextRequest, rawResponse); // We verified `callback` above.
            }
            : undefined;
        return this.innerApiCalls
            .setShieldedInstanceIntegrityPolicy(request, options, wrappedCallback)
            ?.then(([response, operation, rawResponse]) => {
            return [
                {
                    latestResponse: response,
                    done: false,
                    name: response.id,
                    metadata: null,
                    result: {},
                },
                operation,
                rawResponse,
            ];
        });
    }
    setTags(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                project: request.project ?? '',
                zone: request.zone ?? '',
                instance: request.instance ?? '',
            });
        this.initialize().catch(err => {
            throw err;
        });
        this._log.info('setTags request %j', request);
        const wrappedCallback = callback
            ? (error, response, nextRequest, rawResponse) => {
                this._log.info('setTags response %j', rawResponse);
                callback(error, response, nextRequest, rawResponse); // We verified `callback` above.
            }
            : undefined;
        return this.innerApiCalls
            .setTags(request, options, wrappedCallback)
            ?.then(([response, operation, rawResponse]) => {
            return [
                {
                    latestResponse: response,
                    done: false,
                    name: response.id,
                    metadata: null,
                    result: {},
                },
                operation,
                rawResponse,
            ];
        });
    }
    simulateMaintenanceEvent(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                project: request.project ?? '',
                zone: request.zone ?? '',
                instance: request.instance ?? '',
            });
        this.initialize().catch(err => {
            throw err;
        });
        this._log.info('simulateMaintenanceEvent request %j', request);
        const wrappedCallback = callback
            ? (error, response, nextRequest, rawResponse) => {
                this._log.info('simulateMaintenanceEvent response %j', rawResponse);
                callback(error, response, nextRequest, rawResponse); // We verified `callback` above.
            }
            : undefined;
        return this.innerApiCalls
            .simulateMaintenanceEvent(request, options, wrappedCallback)
            ?.then(([response, operation, rawResponse]) => {
            return [
                {
                    latestResponse: response,
                    done: false,
                    name: response.id,
                    metadata: null,
                    result: {},
                },
                operation,
                rawResponse,
            ];
        });
    }
    start(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                project: request.project ?? '',
                zone: request.zone ?? '',
                instance: request.instance ?? '',
            });
        this.initialize().catch(err => {
            throw err;
        });
        this._log.info('start request %j', request);
        const wrappedCallback = callback
            ? (error, response, nextRequest, rawResponse) => {
                this._log.info('start response %j', rawResponse);
                callback(error, response, nextRequest, rawResponse); // We verified `callback` above.
            }
            : undefined;
        return this.innerApiCalls
            .start(request, options, wrappedCallback)
            ?.then(([response, operation, rawResponse]) => {
            return [
                {
                    latestResponse: response,
                    done: false,
                    name: response.id,
                    metadata: null,
                    result: {},
                },
                operation,
                rawResponse,
            ];
        });
    }
    startWithEncryptionKey(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                project: request.project ?? '',
                zone: request.zone ?? '',
                instance: request.instance ?? '',
            });
        this.initialize().catch(err => {
            throw err;
        });
        this._log.info('startWithEncryptionKey request %j', request);
        const wrappedCallback = callback
            ? (error, response, nextRequest, rawResponse) => {
                this._log.info('startWithEncryptionKey response %j', rawResponse);
                callback(error, response, nextRequest, rawResponse); // We verified `callback` above.
            }
            : undefined;
        return this.innerApiCalls
            .startWithEncryptionKey(request, options, wrappedCallback)
            ?.then(([response, operation, rawResponse]) => {
            return [
                {
                    latestResponse: response,
                    done: false,
                    name: response.id,
                    metadata: null,
                    result: {},
                },
                operation,
                rawResponse,
            ];
        });
    }
    stop(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                project: request.project ?? '',
                zone: request.zone ?? '',
                instance: request.instance ?? '',
            });
        this.initialize().catch(err => {
            throw err;
        });
        this._log.info('stop request %j', request);
        const wrappedCallback = callback
            ? (error, response, nextRequest, rawResponse) => {
                this._log.info('stop response %j', rawResponse);
                callback(error, response, nextRequest, rawResponse); // We verified `callback` above.
            }
            : undefined;
        return this.innerApiCalls
            .stop(request, options, wrappedCallback)
            ?.then(([response, operation, rawResponse]) => {
            return [
                {
                    latestResponse: response,
                    done: false,
                    name: response.id,
                    metadata: null,
                    result: {},
                },
                operation,
                rawResponse,
            ];
        });
    }
    suspend(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                project: request.project ?? '',
                zone: request.zone ?? '',
                instance: request.instance ?? '',
            });
        this.initialize().catch(err => {
            throw err;
        });
        this._log.info('suspend request %j', request);
        const wrappedCallback = callback
            ? (error, response, nextRequest, rawResponse) => {
                this._log.info('suspend response %j', rawResponse);
                callback(error, response, nextRequest, rawResponse); // We verified `callback` above.
            }
            : undefined;
        return this.innerApiCalls
            .suspend(request, options, wrappedCallback)
            ?.then(([response, operation, rawResponse]) => {
            return [
                {
                    latestResponse: response,
                    done: false,
                    name: response.id,
                    metadata: null,
                    result: {},
                },
                operation,
                rawResponse,
            ];
        });
    }
    testIamPermissions(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                project: request.project ?? '',
                zone: request.zone ?? '',
                resource: request.resource ?? '',
            });
        this.initialize().catch(err => {
            throw err;
        });
        this._log.info('testIamPermissions request %j', request);
        const wrappedCallback = callback
            ? (error, response, options, rawResponse) => {
                this._log.info('testIamPermissions response %j', response);
                callback(error, response, options, rawResponse); // We verified callback above.
            }
            : undefined;
        return this.innerApiCalls
            .testIamPermissions(request, options, wrappedCallback)
            ?.then(([response, options, rawResponse]) => {
            this._log.info('testIamPermissions response %j', response);
            return [response, options, rawResponse];
        });
    }
    update(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                project: request.project ?? '',
                zone: request.zone ?? '',
                instance: request.instance ?? '',
            });
        this.initialize().catch(err => {
            throw err;
        });
        this._log.info('update request %j', request);
        const wrappedCallback = callback
            ? (error, response, nextRequest, rawResponse) => {
                this._log.info('update response %j', rawResponse);
                callback(error, response, nextRequest, rawResponse); // We verified `callback` above.
            }
            : undefined;
        return this.innerApiCalls
            .update(request, options, wrappedCallback)
            ?.then(([response, operation, rawResponse]) => {
            return [
                {
                    latestResponse: response,
                    done: false,
                    name: response.id,
                    metadata: null,
                    result: {},
                },
                operation,
                rawResponse,
            ];
        });
    }
    updateAccessConfig(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                project: request.project ?? '',
                zone: request.zone ?? '',
                instance: request.instance ?? '',
            });
        this.initialize().catch(err => {
            throw err;
        });
        this._log.info('updateAccessConfig request %j', request);
        const wrappedCallback = callback
            ? (error, response, nextRequest, rawResponse) => {
                this._log.info('updateAccessConfig response %j', rawResponse);
                callback(error, response, nextRequest, rawResponse); // We verified `callback` above.
            }
            : undefined;
        return this.innerApiCalls
            .updateAccessConfig(request, options, wrappedCallback)
            ?.then(([response, operation, rawResponse]) => {
            return [
                {
                    latestResponse: response,
                    done: false,
                    name: response.id,
                    metadata: null,
                    result: {},
                },
                operation,
                rawResponse,
            ];
        });
    }
    updateDisplayDevice(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                project: request.project ?? '',
                zone: request.zone ?? '',
                instance: request.instance ?? '',
            });
        this.initialize().catch(err => {
            throw err;
        });
        this._log.info('updateDisplayDevice request %j', request);
        const wrappedCallback = callback
            ? (error, response, nextRequest, rawResponse) => {
                this._log.info('updateDisplayDevice response %j', rawResponse);
                callback(error, response, nextRequest, rawResponse); // We verified `callback` above.
            }
            : undefined;
        return this.innerApiCalls
            .updateDisplayDevice(request, options, wrappedCallback)
            ?.then(([response, operation, rawResponse]) => {
            return [
                {
                    latestResponse: response,
                    done: false,
                    name: response.id,
                    metadata: null,
                    result: {},
                },
                operation,
                rawResponse,
            ];
        });
    }
    updateNetworkInterface(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                project: request.project ?? '',
                zone: request.zone ?? '',
                instance: request.instance ?? '',
            });
        this.initialize().catch(err => {
            throw err;
        });
        this._log.info('updateNetworkInterface request %j', request);
        const wrappedCallback = callback
            ? (error, response, nextRequest, rawResponse) => {
                this._log.info('updateNetworkInterface response %j', rawResponse);
                callback(error, response, nextRequest, rawResponse); // We verified `callback` above.
            }
            : undefined;
        return this.innerApiCalls
            .updateNetworkInterface(request, options, wrappedCallback)
            ?.then(([response, operation, rawResponse]) => {
            return [
                {
                    latestResponse: response,
                    done: false,
                    name: response.id,
                    metadata: null,
                    result: {},
                },
                operation,
                rawResponse,
            ];
        });
    }
    updateShieldedInstanceConfig(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                project: request.project ?? '',
                zone: request.zone ?? '',
                instance: request.instance ?? '',
            });
        this.initialize().catch(err => {
            throw err;
        });
        this._log.info('updateShieldedInstanceConfig request %j', request);
        const wrappedCallback = callback
            ? (error, response, nextRequest, rawResponse) => {
                this._log.info('updateShieldedInstanceConfig response %j', rawResponse);
                callback(error, response, nextRequest, rawResponse); // We verified `callback` above.
            }
            : undefined;
        return this.innerApiCalls
            .updateShieldedInstanceConfig(request, options, wrappedCallback)
            ?.then(([response, operation, rawResponse]) => {
            return [
                {
                    latestResponse: response,
                    done: false,
                    name: response.id,
                    metadata: null,
                    result: {},
                },
                operation,
                rawResponse,
            ];
        });
    }
    /**
     * Retrieves an aggregated list of all of the instances in your project across all regions and zones. The performance of this method degrades when a filter is specified on a project that has a very large number of instances. To prevent failure, Google recommends that you set the `returnPartialSuccess` parameter to `true`.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.filter
     *   A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {boolean} request.includeAllScopes
     *   Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
     * @param {number} request.maxResults
     *   The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} request.orderBy
     *   Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} request.pageToken
     *   Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} request.project
     *   Project ID for this request.
     * @param {boolean} request.returnPartialSuccess
     *   Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {number} request.serviceProjectNumber
     *   The Shared VPC service project id or service project number for which aggregated list request is invoked for subnetworks list-usable api.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   as tuple [string, {@link protos.google.cloud.compute.v1.InstancesScopedList|InstancesScopedList}]. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/instances.aggregated_list.js</caption>
     * region_tag:compute_v1_generated_Instances_AggregatedList_async
     */
    aggregatedListAsync(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                project: request.project ?? '',
            });
        const defaultCallSettings = this._defaults['aggregatedList'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize().catch(err => {
            throw err;
        });
        this._log.info('aggregatedList iterate %j', request);
        return this.descriptors.page.aggregatedList.asyncIterate(this.innerApiCalls['aggregatedList'], request, callSettings);
    }
    list(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                project: request.project ?? '',
                zone: request.zone ?? '',
            });
        this.initialize().catch(err => {
            throw err;
        });
        const wrappedCallback = callback
            ? (error, values, nextPageRequest, rawResponse) => {
                this._log.info('list values %j', values);
                callback(error, values, nextPageRequest, rawResponse); // We verified callback above.
            }
            : undefined;
        this._log.info('list request %j', request);
        return this.innerApiCalls
            .list(request, options, wrappedCallback)
            ?.then(([response, input, output]) => {
            this._log.info('list values %j', response);
            return [response, input, output];
        });
    }
    /**
     * Equivalent to `list`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.filter
     *   A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {number} request.maxResults
     *   The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} request.orderBy
     *   Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} request.pageToken
     *   Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} request.project
     *   Project ID for this request.
     * @param {boolean} request.returnPartialSuccess
     *   Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} request.zone
     *   The name of the zone for this request.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.compute.v1.Instance|Instance} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listStream(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                project: request.project ?? '',
                zone: request.zone ?? '',
            });
        const defaultCallSettings = this._defaults['list'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize().catch(err => {
            throw err;
        });
        this._log.info('list stream %j', request);
        return this.descriptors.page.list.createStream(this.innerApiCalls.list, request, callSettings);
    }
    /**
     * Equivalent to `list`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.filter
     *   A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {number} request.maxResults
     *   The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} request.orderBy
     *   Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} request.pageToken
     *   Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} request.project
     *   Project ID for this request.
     * @param {boolean} request.returnPartialSuccess
     *   Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} request.zone
     *   The name of the zone for this request.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.compute.v1.Instance|Instance}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/instances.list.js</caption>
     * region_tag:compute_v1_generated_Instances_List_async
     */
    listAsync(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                project: request.project ?? '',
                zone: request.zone ?? '',
            });
        const defaultCallSettings = this._defaults['list'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize().catch(err => {
            throw err;
        });
        this._log.info('list iterate %j', request);
        return this.descriptors.page.list.asyncIterate(this.innerApiCalls['list'], request, callSettings);
    }
    listReferrers(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                project: request.project ?? '',
                zone: request.zone ?? '',
                instance: request.instance ?? '',
            });
        this.initialize().catch(err => {
            throw err;
        });
        const wrappedCallback = callback
            ? (error, values, nextPageRequest, rawResponse) => {
                this._log.info('listReferrers values %j', values);
                callback(error, values, nextPageRequest, rawResponse); // We verified callback above.
            }
            : undefined;
        this._log.info('listReferrers request %j', request);
        return this.innerApiCalls
            .listReferrers(request, options, wrappedCallback)
            ?.then(([response, input, output]) => {
            this._log.info('listReferrers values %j', response);
            return [response, input, output];
        });
    }
    /**
     * Equivalent to `listReferrers`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.filter
     *   A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {string} request.instance
     *   Name of the target instance scoping this request, or '-' if the request should span over all instances in the container.
     * @param {number} request.maxResults
     *   The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} request.orderBy
     *   Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} request.pageToken
     *   Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} request.project
     *   Project ID for this request.
     * @param {boolean} request.returnPartialSuccess
     *   Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} request.zone
     *   The name of the zone for this request.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.compute.v1.Reference|Reference} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listReferrersAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listReferrersStream(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                project: request.project ?? '',
                zone: request.zone ?? '',
                instance: request.instance ?? '',
            });
        const defaultCallSettings = this._defaults['listReferrers'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize().catch(err => {
            throw err;
        });
        this._log.info('listReferrers stream %j', request);
        return this.descriptors.page.listReferrers.createStream(this.innerApiCalls.listReferrers, request, callSettings);
    }
    /**
     * Equivalent to `listReferrers`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.filter
     *   A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
     * @param {string} request.instance
     *   Name of the target instance scoping this request, or '-' if the request should span over all instances in the container.
     * @param {number} request.maxResults
     *   The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
     * @param {string} request.orderBy
     *   Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
     * @param {string} request.pageToken
     *   Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
     * @param {string} request.project
     *   Project ID for this request.
     * @param {boolean} request.returnPartialSuccess
     *   Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
     * @param {string} request.zone
     *   The name of the zone for this request.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.compute.v1.Reference|Reference}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/instances.list_referrers.js</caption>
     * region_tag:compute_v1_generated_Instances_ListReferrers_async
     */
    listReferrersAsync(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                project: request.project ?? '',
                zone: request.zone ?? '',
                instance: request.instance ?? '',
            });
        const defaultCallSettings = this._defaults['listReferrers'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize().catch(err => {
            throw err;
        });
        this._log.info('listReferrers iterate %j', request);
        return this.descriptors.page.listReferrers.asyncIterate(this.innerApiCalls['listReferrers'], request, callSettings);
    }
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close() {
        if (this.instancesStub && !this._terminated) {
            return this.instancesStub.then(stub => {
                this._log.info('ending gRPC channel');
                this._terminated = true;
                stub.close();
            });
        }
        return Promise.resolve();
    }
}
exports.InstancesClient = InstancesClient;
//# sourceMappingURL=instances_client.js.map